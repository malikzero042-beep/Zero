name: Create 32GB Windows RDP (AWS EC2)

on:
  workflow_dispatch:

env:
  INSTANCE_TYPE: m5.2xlarge   # ~32 GiB (AWS m5.2xlarge)
  WINDOWS_ADMIN: AdminUser

jobs:
  create-32gb-windows:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Launch EC2 Windows instance (replace AMI/SUBNET/SG/KEY)
        id: launch
        run: |
          # ---- REQUIRED: Replace these placeholders with real values ----
          AMI_ID="${{ secrets.WINDOWS_AMI_ID }}"           # e.g. a Windows Server 2019/2016 AMI for your region
          SUBNET_ID="${{ secrets.SUBNET_ID }}"
          SECURITY_GROUP_ID="${{ secrets.SECURITY_GROUP_ID }}"  # can restrict to management IP or leave minimal
          KEY_NAME="${{ secrets.KEY_NAME }}"                    # optional for WinRM/RDP access
          INSTANCE_TYPE="${INSTANCE_TYPE}"

          # User-data script for Windows (PowerShell). Installs Tailscale, enables RDP, creates user.
          # IMPORTANT: adjust tailscale version or installer path if needed.
          read -r -d '' USERDATA <<'POWERSHELL'
          <powershell>
          # Wait for cloud-init-like readiness
          Start-Sleep -Seconds 10

          # Create strong local user (32 character random)
          $pw = -join ((65..90)+(97..122)+(48..57) | Get-Random -Count 32 | ForEach-Object {[char]$_})
          $secure = ConvertTo-SecureString $pw -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $secure -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          # Enable RDP and set basic RDP registry keys
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          # (Optional) Leave NLA enabled for better security; if you need to disable set UserAuthentication=0
          # Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1 -Force

          # Allow RDP in firewall (if you want to open port 3389 publicly)
          # netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389

          # Install Tailscale
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

          # Bring up Tailscale with authkey passed as instance tag (we'll replace later)
          # We'll try to read TAILSCALE_AUTH_KEY from instance tags; if not present, it will fail.
          # For simplicity, use the EC2 instance's user-data-injected variable (see below).
          $env:TAILSCALE_AUTH_KEY = "${{ secrets.TAILSCALE_AUTH_KEY }}"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --accept-routes=false

          # Print the tailscale ip to instance console (makes it easier to fetch later)
          & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 | Out-File -FilePath C:\Windows\Temp\tailscale_ip.txt -Encoding ascii

          # Save credentials to a file (you may prefer secure storage)
          "User: RDP" + " Password: " + $pw | Out-File -FilePath C:\Windows\Temp\rdp_creds.txt -Encoding ascii

          # Restart Remote Desktop Service to be safe
          Restart-Service -Name TermService -Force
          </powershell>
          POWERSHELL

          # Launch instance
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id "$AMI_ID" \
            --count 1 \
            --instance-type "$INSTANCE_TYPE" \
            --subnet-id "$SUBNET_ID" \
            --security-group-ids "$SECURITY_GROUP_ID" \
            --key-name "$KEY_NAME" \
            --associate-public-ip-address \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=gh-32gb-rdp}]" \
            --user-data "$USERDATA" \
            --query 'Instances[0].InstanceId' --output text)

          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for instance status ok
        run: |
          INSTANCE_ID=${{ steps.launch.outputs.instance_id }}
          echo "Waiting for instance $INSTANCE_ID to be running..."
          aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
          echo "Instance running."

      - name: Fetch public IP (if attached)
        id: ip
        run: |
          INSTANCE_ID=${{ steps.launch.outputs.instance_id }}
          PUB_IP=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "public_ip=$PUB_IP" >> $GITHUB_OUTPUT

      - name: Show connection info and instructions
        run: |
          echo "EC2 Instance created: ${{ steps.launch.outputs.instance_id }}"
          echo "Public IP: ${{ steps.ip.outputs.public_ip }}"
          echo "If Tailscale was brought up, the Tailscale IP and Windows creds are saved on the instance at:"
          echo "  C:\\Windows\\Temp\\tailscale_ip.txt"
          echo "  C:\\Windows\\Temp\\rdp_creds.txt"
          echo ""
          echo "Use AWS Session Manager / RDP or retrieve the files via WinRM/SSM to get the Tailscale IP and password."
