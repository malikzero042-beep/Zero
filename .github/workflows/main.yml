name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: [self-hosted, windows, 64gb-ram]  # Make sure the self-hosted runner has 64GB RAM
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Write-Host "Configuring RDP settings..."
          try {
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
            Write-Host "RDP settings configured successfully."
          } catch {
            Write-Error "Failed to configure RDP settings: $_"
            exit 1
          }

          # Remove existing rule if exists and add new one for RDP over Tailscale
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart RDP service
          try {
            Restart-Service -Name TermService -Force
            Write-Host "RDP service restarted."
          } catch {
            Write-Error "Failed to restart RDP service: $_"
            exit 1
          }

      - name: Create RDP User with Secure Password
        run: |
          Write-Host "Creating RDP user..."
          try {
            Add-Type -AssemblyName System.Security
            $charSet = @{
                Upper   = [char[]](65..90)      # A-Z
                Lower   = [char[]](97..122)     # a-z
                Number  = [char[]](48..57)      # 0-9
                Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126)) # Special characters
            }
            $rawPassword = @()
            $rawPassword += $charSet.Upper | Get-Random -Count 4
            $rawPassword += $charSet.Lower | Get-Random -Count 4
            $rawPassword += $charSet.Number | Get-Random -Count 4
            $rawPassword += $charSet.Special | Get-Random -Count 4
            $password = -join ($rawPassword | Sort-Object { Get-Random })
            $securePass = ConvertTo-SecureString $password -AsPlainText -Force
            New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member "RDP"
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
            Write-Host "User 'RDP' created with a secure password."

            # Store the password in GitHub's environment variables
            echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          } catch {
            Write-Error "Failed to create user: $_"
            exit 1
          }

      - name: Install Tailscale
        run: |
          Write-Host "Installing Tailscale..."
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          try {
            Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
            Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
            Write-Host "Tailscale installed successfully."
          } catch {
            Write-Error "Failed to install Tailscale: $_"
            exit 1
          }

      - name: Establish Tailscale Connection
        run: |
          Write-Host "Establishing Tailscale connection..."
          try {
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="gh-runner-$env:GITHUB_RUN_ID"
            
            # Wait for Tailscale to assign an IP
            $tsIP = $null
            $retries = 0
            while (-not $tsIP -and $retries -lt 10) {
                $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
                Start-Sleep -Seconds 5
                $retries++
            }
            
            if (-not $tsIP) {
                Write-Error "Tailscale IP not assigned. Exiting."
                exit 1
            }
            echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
            Write-Host "Tailscale connection established with IP: $tsIP"
          } catch {
            Write-Error "Failed to establish Tailscale connection: $_"
            exit 1
          }

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Verifying RDP accessibility..."
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed."
              exit 1
          }
          Write-Host "RDP accessibility verified. TCP connection successful."

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          
          # Keep runner active indefinitely
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
